import scipy.linalg as linalg
import numpy as np

def recoverData(Z, U, K):
    """
    recovers an approximation the
    original data that has been reduced to K dimensions. It returns the
    approximate reconstruction in X_rec.
    """


    # ====================== YOUR CODE HERE ======================
    # Instructions: Compute the approximation of the data by projecting back
    #               onto the original space using the top K eigenvectors in U.
    #
    #               For the i-th example Z(i,:), the (approximate)
    #               recovered data for dimension j is given as follows:
    #                    v = Z(i, :)'
    #                    recovered_j = v' * U(j, 1:K)'
    #
    #               Notice that U(j, 1:K) is a row vector.
    #

    # Z: m-by-K <= generated by multiplying X(m-by-n) to U_reduce(n-by-K)
    # U: n-by-n
    # X_rec: m-by-n <= generated by Z*U_reduce'

    U_reduce = U[:, :K]

    # Z = X * U_reduce <= how Z was generated
    # Z.T = U_reduce.T * X.T <= the equation rewritten

    # The way to solve the rewritten equation is as below:
    X_rec = np.asarray(linalg.lstsq(U_reduce.T, Z.T))

    # =============================================================

    return X_rec
